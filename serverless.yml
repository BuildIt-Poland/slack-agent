service: slack-agent
plugins:
  - serverless-stage-manager
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage,'dev'}
  environment:
    SLACK_CLIENT_ID: ${ssm:SLACK_AGENT_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${ssm:SLACK_AGENT_CLIENT_ID}
    SLACK_SIGNING_SECRET:  ${ssm:SLACK_AGENT_SIGING_SECRET}
    SLACK_CLIENT_SCOPES: ${ssm:SLACK_AGENT_CLIENT_SCOPE}
    PARKING_PLACES_TABLE: ${self:custom.parkingPlaces}
    BOOKINGS_TABLE: ${self:custom.bookings}
    ENV_STAGE: ${self:custom.stage}
  iamRoleStatements:
    - Effect: Allow
      Resource: "*"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
region: us-east-1

custom:
  stages:
    - dev
    - stg
    - prod
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  parkingPlaces: ParkingPlaces-${self:custom.stage}
  bookings: Bookings-${self:custom.stage}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}

functions:
  authorize:
    handler: /handlers/authorize.authorize
    events:
      - http:
          path: slack/authorize
          method: get
  add:
    handler: /handlers/addParkingPlace.add
    events:
      - http:
          path: slack/add
          method: post
  reservation:
    handler: /handlers/bookParkingPlace.reservation
    events:
      - http:
          path: slack/reservation
          method: post
  reservationList:
    handler: /handlers/listParkingPlaces.reservationList
    events:
      - http:
          path: slack/reservationList
          method: post
  deleteReservation:
    handler: /handlers/handler.unbookParkingPlace
    events:
      - http:
          path: slack/deleteReservation
          method: post
# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(dynamo/tableSchema/parkingPlacesTable.yml)}
  - ${file(dynamo/tableSchema/bookingsTable.yml)}